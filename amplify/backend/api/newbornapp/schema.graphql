type Query {
  buy(newbornId: String): String
  start(newbornId: String): String
  terminate(instanceId: String): String
}

type User @model {
  id: String!
  profileImage: String
  userName: String
  newborns: [Newborn] @connection(name: "NewbornOwner")
  trainers: [Trainer] @connection(name: "TrainerOwner")
}

type Generation @model {
  id: String!
  index: Int!
  newborns: [Newborn] @connection(name: "GenerationNewborn")
}

type Newborn @model {
  bio: String
  bornPlace: String
  childs: [String]
  createdAt: String
  generation: Generation! @connection(name: "GenerationNewborn")
  hexColor: String
  id: String!
  instanceId: String
  models: [Model] @connection(name: "NewbornModel")
  name: String!
  owner: User @connection(name: "NewbornOwner")
  parents: [String]
  partners: [String]
  predictions: [Prediction] @connection(name: "NewbornPrediction")
  sex: String!
  steps: Int
  training: Boolean
  trainingStage: String
}

type Model @model {
  id: String!
  cellInfos: [Float]
  cellPositions: [[Float]]
  newborn: Newborn @connection(name: "NewbornModel")
  episodes: [Episode] @connection(name: "ModelEpisode")
}

type Episode @model {
  id: String!
  created: String!
  model: Model @connection(name: "ModelEpisode")
  steps: [Summary] @connection(name: "EpisodeSummary")
}

type Summary @model {
  meanReward: Float
  standardReward: Float
  step: Int
  created: String!
  episode: Episode @connection(name: "EpisodeSummary")
}

type Prediction @model {
  meanReward: Float
  newborn: Newborn @connection(name: "NewbornPrediction")
}

type Subscription {
  onCreateSummarySet(summaryEpisodeId: String!): Summary
    @aws_subscribe(mutations: ["createSummary"])
}

type Trainer @model {
  createdAt: String
  id: String!
  owner: User @connection(name: "TrainerOwner")
}
